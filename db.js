const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// 資料庫檔案路徑
const dbDir = path.join(__dirname, 'db');
const dbPath = path.join(dbDir, 'sqlite.db');

// 確保 db 資料夾存在
if (!fs.existsSync(dbDir)) {
    try {
        fs.mkdirSync(dbDir);
        console.log('成功建立 db 資料夾:', dbDir);
    } catch (err) {
        console.error('無法建立 db 資料夾:', err.message);
        process.exit(1);
    }
}

// 開啟（或建立）資料庫
const db = new sqlite3.Database(dbPath, (err) => {
    if (err) {
        console.error('無法開啟資料庫:', err.message);
        console.error('資料庫路徑:', dbPath);
        process.exit(1);
    } else {
        console.log('成功開啟資料庫:', dbPath);
        // 檢查 gold_price table 是否存在，若不存在則建立
        db.run(`CREATE TABLE IF NOT EXISTS gold_price (
                    year INTEGER PRIMARY KEY,
                    average_price REAL NOT NULL,
                    highest_price REAL NOT NULL,
                    lowest_price REAL NOT NULL,
                    annual_range REAL NOT NULL
                )`, (err) => {
            if (err) {
                console.error('建立 gold_price 資料表失敗:', err.message);
                process.exit(1);
            } else {
                console.log('gold_price 資料表已確認存在');
                // 新增 silver_price 資料表自動建立
                db.run(`CREATE TABLE IF NOT EXISTS silver_price (
                    year INTEGER PRIMARY KEY,
                    average_price REAL NOT NULL,
                    highest_price REAL NOT NULL,
                    lowest_price REAL NOT NULL,
                    annual_range REAL NOT NULL
                )`, (err) => {
                    if (err) {
                        console.error('建立 silver_price 資料表失敗:', err.message);
                        process.exit(1);
                    } else {
                        console.log('silver_price 資料表已確認存在');
                        // 插入 silver_price 資料
                        const silverData = [
                            [2025, 32.12, 34.56, 28.87, 15.42],
                            [2024, 28.27, 34.85, 22.09, 21.36],
                            [2023, 23.40, 26.06, 20.01, -0.72],
                            [2022, 21.76, 26.90, 17.83, 2.64],
                            [2021, 25.14, 29.42, 21.49, -11.55],
                            [2020, 20.69, 29.26, 11.77, 47.44],
                            [2019, 16.22, 19.55, 14.32, 15.36],
                            [2018, 15.71, 17.62, 13.98, -9.40],
                            [2017, 17.07, 18.51, 15.43, 7.12],
                            [2016, 17.17, 20.70, 13.75, 15.86],
                            [2015, 15.66, 18.23, 13.70, -13.59],
                            [2014, 19.07, 22.05, 15.28, -18.10],
                            [2013, 23.79, 32.23, 18.61, -34.89],
                            [2012, 31.15, 37.23, 26.67, 6.28],
                            [2011, 35.12, 48.70, 26.16, -8.00],
                            [2010, 20.19, 30.70, 15.14, 80.28],
                            [2009, 14.67, 19.18, 10.51, 57.46],
                            [2008, 14.99, 20.92, 8.88, -26.90],
                            [2007, 13.38, 15.82, 11.67, 14.42],
                            [2006, 11.55, 14.94, 8.83, 46.09],
                            [2005, 7.31, 9.23, 6.39, 29.47],
                            [2004, 6.66, 8.29, 5.50, 14.24],
                            [2003, 4.88, 5.97, 4.37, 27.84],
                            [2002, 4.60, 5.10, 4.24, 3.32],
                            [2001, 4.37, 4.82, 4.07, -1.31],
                            [2000, 4.95, 5.45, 4.57, -14.07],
                            [1999, 5.22, 5.75, 4.88, 6.39],
                            [1998, 5.54, 7.81, 4.69, -16.50],
                            [1997, 4.90, 6.27, 4.22, 25.00],
                            [1996, 5.20, 5.83, 4.71, -6.61],
                            [1995, 5.20, 6.04, 4.42, 5.98],
                            [1994, 5.29, 5.75, 4.64, -5.27],
                            [1993, 4.31, 5.42, 3.56, 39.51],
                            [1992, 3.95, 4.34, 3.65, -4.92],
                            [1991, 4.06, 4.57, 3.55, -7.88],
                            [1990, 4.83, 5.36, 3.95, -19.73],
                            [1989, 5.50, 6.21, 5.05, -13.72],
                            [1988, 6.53, 7.82, 6.05, -9.70],
                            [1987, 7.02, 10.93, 5.36, 26.89],
                            [1986, 5.47, 6.31, 4.85, -8.97],
                            [1985, 6.13, 6.75, 5.45, -7.79],
                            [1984, 8.15, 10.11, 6.22, -29.41],
                            [1983, 11.42, 14.67, 7.54, -18.03],
                            [1982, 7.92, 11.11, 4.90, 33.37],
                            [1981, 10.49, 16.30, 8.03, -47.42],
                            [1980, 20.98, 49.45, 10.89, -51.86],
                            [1979, 11.07, 32.20, 5.94, 434.88],
                            [1978, 5.42, 6.26, 4.82, 26.47],
                            [1977, 4.64, 4.98, 4.31, 9.17],
                            [1976, 4.35, 5.08, 3.83, 4.31],
                            [1975, 4.43, 5.21, 3.93, -6.49],
                            [1974, 4.67, 6.76, 3.27, 37.12],
                            [1973, 2.55, 3.26, 1.96, 60.59],
                            [1972, 1.68, 2.03, 1.37, 48.18],
                            [1971, 1.54, 1.75, 1.27, -15.95],
                            [1970, 1.77, 1.93, 1.57, -8.94],
                            [1969, 1.80, 2.04, 1.56, -8.21]
                        ];
                        const insertSilverSQL = `INSERT OR IGNORE INTO silver_price (year, average_price, highest_price, lowest_price, annual_range) VALUES (?, ?, ?, ?, ?)`;
                        silverData.forEach(row => {
                            db.run(insertSilverSQL, row, (err) => {
                                if (err) {
                                    console.error('插入 silver_price 資料失敗:', err.message, '資料:', row);
                                }
                            });
                        });
                        setTimeout(() => {
                            db.get('SELECT COUNT(*) as count FROM silver_price', (err, row) => {
                                if (err) {
                                    console.error('檢查 silver_price 表格失敗:', err.message);
                                } else {
                                    console.log(`silver_price 表格包含 ${row.count} 筆資料`);
                                    if (row.count === 0) {
                                        console.warn('警告：silver_price 表格為空，可能插入失敗');
                                    }
                                }
                            });
                        }, 1000);
                        console.log('silver_price 資料插入開始（如不存在）');
                    }
                });
                // 建立 platinum_price 資料表（如不存在）
                db.run(`CREATE TABLE IF NOT EXISTS platinum_price (
                    year INTEGER PRIMARY KEY,
                    average_price REAL NOT NULL,
                    highest_price REAL NOT NULL,
                    lowest_price REAL NOT NULL,
                    annual_range REAL NOT NULL
                )`, (err) => {
                    if (err) {
                        console.error('建立 platinum_price 資料表失敗:', err.message);
                        process.exit(1);
                    } else {
                        console.log('platinum_price 資料表已確認存在');
                        // 插入 platinum_price 資料
                        const platinumData = [
                            [2025, 910.31, 923.22, 896.20, 3.02],
                            [2024, 953.75, 1084.88, 872.72, -9.86],
                            [2023, 965.28, 1124.00, 843.00, -6.99],
                            [2022, 958.06, 1153.20, 829.00, 10.68],
                            [2021, 1088.51, 1293.10, 894.20, -10.44],
                            [2020, 893.39, 1078.44, 596.80, 10.44],
                            [2019, 868.04, 984.20, 786.60, 22.12],
                            [2018, 882.18, 1032.10, 771.90, -14.70],
                            [2017, 950.49, 1028.58, 875.40, 3.81],
                            [2016, 988.90, 1176.25, 818.45, 1.30],
                            [2015, 1050.61, 1285.00, 831.30, -26.07],
                            [2014, 1383.62, 1512.00, 1178.00, -11.13],
                            [2013, 1484.73, 1736.00, 1317.00, -11.13],
                            [2012, 1550.89, 1729.00, 1390.00, 12.78],
                            [2011, 1719.03, 1887.00, 1354.00, -22.85],
                            [2010, 1611.51, 1786.00, 1475.00, 20.12],
                            [2009, 1205.79, 1494.00, 844.00, 62.69],
                            [2008, 1571.04, 2273.00, 763.00, -41.46],
                            [2007, 1306.22, 1544.00, 1120.00, 37.21],
                            [2006, 1142.40, 1355.00, 982.00, 15.85],
                            [2005, 896.92, 1004.00, 844.00, 12.08],
                            [2004, 845.83, 936.00, 767.00, 5.90],
                            [2003, 692.03, 840.00, 603.00, 35.95],
                            [2002, 539.99, 607.00, 453.00, 24.58],
                            [2001, 528.26, 637.00, 415.00, -22.46],
                            [2000, 544.42, 622.00, 414.00, 39.73],
                            [1999, 377.20, 457.00, 342.00, 22.97],
                            [1998, 371.82, 429.00, 334.25, -0.76],
                            [1997, 395.19, 497.00, 342.50, -1.76],
                            [1996, 397.26, 431.50, 367.00, -7.22],
                            [1995, 424.59, 461.50, 398.25, -4.50],
                            [1994, 405.60, 425.50, 378.00, 5.84],
                            [1993, 374.54, 422.00, 338.25, 11.46],
                            [1992, 360.02, 391.00, 332.75, 4.51],
                            [1991, 376.11, 423.00, 333.00, -17.85],
                            [1990, 471.29, 532.00, 391.50, -15.71],
                            [1989, 509.68, 563.75, 470.00, -6.15],
                            [1988, 530.29, 623.50, 446.00, 4.10],
                            [1987, 556.63, 641.25, 461.00, 4.71],
                            [1986, 465.29, 675.50, 341.30, 40.32]
                        ];
                        const insertPlatinumSQL = `INSERT OR IGNORE INTO platinum_price (year, average_price, highest_price, lowest_price, annual_range) VALUES (?, ?, ?, ?, ?)`;
                        platinumData.forEach(row => {
                            db.run(insertPlatinumSQL, row, (err) => {
                                if (err) {
                                    console.error('插入 platinum_price 資料失敗:', err.message, '資料:', row);
                                }
                            });
                        });
                        setTimeout(() => {
                            db.get('SELECT COUNT(*) as count FROM platinum_price', (err, row) => {
                                if (err) {
                                    console.error('檢查 platinum_price 表格失敗:', err.message);
                                } else {
                                    console.log(`platinum_price 表格包含 ${row.count} 筆資料`);
                                    if (row.count === 0) {
                                        console.warn('警告：platinum_price 表格為空，可能插入失敗');
                                    }
                                }
                            });
                        }, 1000);
                        console.log('platinum_price 資料插入開始（如不存在）');
                    }
                });
                // 建立 platinum_price 資料表（如不存在）
                db.run(`CREATE TABLE IF NOT EXISTS platinum_price (
                    year INTEGER PRIMARY KEY,
                    average_price REAL NOT NULL,
                    highest_price REAL NOT NULL,
                    lowest_price REAL NOT NULL,
                    annual_range REAL NOT NULL
                )`, (err) => {
                    if (err) {
                        console.error('建立 platinum_price 資料表失敗:', err.message);
                        process.exit(1);
                    } else {
                        console.log('platinum_price 資料表已確認存在');
                    }
                });
                // 插入資料
                const data = [
                    [2025, 3002.77, 3499.83, 2614.69, 26.49],
                    [2024, 2388.98, 2789.95, 1992.06, 27.23],
                    [2023, 1943.00, 2115.10, 1811.27, 13.08],
                    [2022, 1801.87, 2043.30, 1626.65, -0.23],
                    [2021, 1798.89, 1954.40, 1678.00, -3.51],
                    [2020, 1773.73, 2058.40, 1472.35, 24.43],
                    [2019, 1393.34, 1542.60, 1270.05, 18.83],
                    [2018, 1268.93, 1360.25, 1176.70, -1.15],
                    [2017, 1260.39, 1351.20, 1162.00, 12.57],
                    [2016, 1251.92, 1372.60, 1073.60, 8.63],
                    [2015, 1158.86, 1298.00, 1049.60, -11.59],
                    [2014, 1266.06, 1379.00, 1144.50, -0.19],
                    [2013, 1409.51, 1692.50, 1192.75, -27.79],
                    [2012, 1668.86, 1790.00, 1537.50, 5.68],
                    [2011, 1573.16, 1896.50, 1316.00, 11.65],
                    [2010, 1226.66, 1426.00, 1052.25, 27.74],
                    [2009, 973.66, 1218.25, 813.00, 27.63],
                    [2008, 872.37, 1023.50, 692.50, 3.41],
                    [2007, 696.43, 841.75, 608.30, 31.59],
                    [2006, 604.34, 725.75, 520.75, 23.92],
                    [2005, 444.99, 537.50, 411.50, 17.12],
                    [2004, 409.53, 455.75, 373.50, 4.97],
                    [2003, 363.83, 417.25, 319.75, 21.74],
                    [2002, 310.08, 348.50, 277.80, 23.96],
                    [2001, 271.19, 292.85, 256.70, 1.41],
                    [2000, 279.29, 316.60, 263.80, -6.26],
                    [1999, 278.86, 326.25, 252.90, 1.18],
                    [1998, 294.12, 314.60, 273.40, -0.61],
                    [1997, 331.00, 367.80, 283.05, -21.74],
                    [1996, 387.73, 416.25, 368.30, -4.43],
                    [1995, 384.07, 396.95, 372.45, 1.10],
                    [1994, 384.16, 397.50, 370.25, -2.09],
                    [1993, 360.05, 406.70, 326.50, 17.35],
                    [1992, 343.87, 359.30, 330.20, -5.80],
                    [1991, 362.34, 403.70, 343.50, -9.62],
                    [1990, 383.73, 421.40, 346.75, -2.49],
                    [1989, 381.27, 417.15, 358.10, -2.23],
                    [1988, 436.78, 485.30, 389.05, -15.69],
                    [1987, 446.84, 502.75, 392.60, 24.46],
                    [1986, 368.20, 442.75, 326.00, 19.54],
                    [1985, 317.42, 339.30, 285.00, 5.83],
                    [1984, 360.65, 406.85, 303.25, -19.00],
                    [1983, 423.71, 511.50, 374.75, -14.84],
                    [1982, 376.11, 488.50, 297.00, 12.00],
                    [1981, 459.16, 599.25, 391.75, -32.15],
                    [1980, 614.75, 843.00, 474.00, 12.50],
                    [1979, 307.01, 524.00, 216.55, 133.41],
                    [1978, 193.57, 243.65, 166.30, 35.57],
                    [1977, 147.84, 168.15, 129.40, 23.08],
                    [1976, 124.80, 140.35, 103.05, -4.06],
                    [1975, 160.87, 186.25, 128.75, -25.20],
                    [1974, 158.76, 197.50, 114.75, 67.04],
                    [1973, 97.12, 127.00, 64.10, 73.49],
                    [1972, 58.17, 70.00, 43.73, 48.74],
                    [1971, 40.80, 43.90, 37.33, 16.37],
                    [1970, 35.96, 39.19, 34.78, 6.16],
                    [1969, 41.10, 43.75, 35.00, -16.07]
                ];
                const insertSQL = `INSERT OR IGNORE INTO gold_price (year, average_price, highest_price, lowest_price, annual_range) VALUES (?, ?, ?, ?, ?)`;
                let insertedRows = 0;
                data.forEach(row => {
                    db.run(insertSQL, row, (err) => {
                        if (err) {
                            console.error('插入資料失敗:', err.message, '資料:', row);
                        } else {
                            insertedRows++;
                        }
                    });
                });
                // 等待插入完成後檢查資料
                setTimeout(() => {
                    db.get('SELECT COUNT(*) as count FROM gold_price', (err, row) => {
                        if (err) {
                            console.error('檢查 gold_price 表格失敗:', err.message);
                        } else {
                            console.log(`gold_price 表格包含 ${row.count} 筆資料`);
                            if (row.count === 0) {
                                console.warn('警告：gold_price 表格為空，可能插入失敗');
                            }
                        }
                    });
                }, 1000); // 延遲 1 秒確保插入完成
                console.log('gold_price 資料插入開始（如不存在）');
            }
        });
    }
});

module.exports = db;

